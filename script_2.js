"use strict";
//Объясните почему код даёт именно такие результаты?

//пример 1
let a = 1, b = 1, c, d;
c = ++a;
alert(c); // ответ: 2
/*
1. В префиксной форме инкрементирование производится сразу
2. Сперва к 1 прибавляется 1 и получается 2.
3. Потом выводится значение: 2.
 */

// пример 2
d = b++;
alert(d); //ответ: 1
/*
1. В постфиксной форме сначала происходит возвращение значения,
 а потом выполняется инкрементирования
2. Сперва выводится значение 1.
3. Потом к значению 1 прибавляется еще 1, и в памяти будет 2.
 */

// пример 3
c = 2 + ++a;
alert(c); //ответ: 5
/*
1. В перво примере у нас уже была у переменной постфиксный инкремент,
поэтому переменная А равно 2.
2. Далее у переменной А префиксный инкремент,
поэтому к 2 прибавится 1, и переменная А будет равна 3.
3. Далее произойдет сложение 2 и 3, в результате чего,
переменная с будет равнятся 5.
 */

// пример 4
d = 2 + b++;
alert(d); //ответ: 4
/*
1. В примере 2 переменная В равна 2,
и у нее в текущем примере стоит постфиксный инкремент.
2. Браузер сделает инкремент для переменной В, но в память запишет 3,
а сложение сделат как 2 и 2
3. В результате отобразится переменная Д со значение 4, но в пямяти наверное будет 5.
 */

alert(a); //3
/*
1. В примере 3 у переменной А был  префиксный инкремент и в памяти
сохранилось 3.
2. В результате браузер выведет 3.
 */

alert(b); //3
/*
1. В примере 4 переменная В в памяти записана со значение 3.
2. В результате браузер выведет 3.
 */

let w = 2;
let x = 1 + (w *= 2);
alert(x);
/*
1. Оператор *= это тоже самое что и умножение
2. Сперва выполнится оператор в скобках,
перемножится 2 на 2 и получится переменная W со значением 4.
3. Далее произойдет сложение 1 и 4, и Х будет равна 5
 */